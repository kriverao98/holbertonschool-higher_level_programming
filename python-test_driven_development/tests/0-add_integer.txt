import unittest
from 0-add_integer import add_integer

class TestAddInt(unittest.TestCase):
    def test_add_integer(self):
        self.assertEqual(add_integer(1, 2), 3)
        self.assertEqual(add_integer(10, 20), 30)
        self.assertEqual(add_integer(-1, -1), -2)

    def test_add_integer_default(self):
        self.assertEqual(add_integer(1), 99)
        self.assertEqual(add_integer(0), 98)
        self.assertEqual(add_integer(-98), 0)

    def test_add_integer_invalid_a(self):
        with self.assertRaises(TypeError) as e:
            add_integer("1", 2)
        self.assertEqual(str(e.exception), "a must be an integer")

        with self.assertRaises(TypeError) as e:
            add_integer(1.5, 2)
        self.assertEqual(str(e.exception), "a must be an integer")

    def test_add_integer_invalid_b(self):
        with self.assertRaises(TypeError) as e:
            add_integer(1, "2")
        self.assertEqual(str(e.exception), "b must be an integer")

        with self.assertRaises(TypeError) as e:
            add_integer(1, 2.5)
        self.assertEqual(str(e.exception), "b must be an integer")

  def test_add_integer_both_invalid(self):
        with self.assertRaises(TypeError) as e:
            add_integer("1", "2")
        self.assertEqual(str(e.exception), "a must be an integer")

if __name__ == '__main__':
    unittest.main()
